[{"id":0,"href":"/keydra/config_providers/","title":"About Config Providers","parent":"Keydra - Secrets Management for Humans!","content":"Config providers are a special type of Keydra provider, that can be the source of secrets and environments for Keydra to manage.\nThey must have an accountusername attribute, and a load_config method, which they use to bootstrap Keydra.\nThis special method is passed initial config values, which are built by Keydra from environment variables as can be seen in docs/sample_template.yaml.\n{ \u0026#34;accountusername\u0026#34;: \u0026#34;an_account\u0026#34;, \u0026#34;secrets\u0026#34;: { \u0026#34;repository\u0026#34;: \u0026#34;keydraconfiguration\u0026#34;, \u0026#34;filetype\u0026#34;: \u0026#34;yaml\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;config/secrets.yaml\u0026#34; }, \u0026#34;environments\u0026#34;: { \u0026#34;filetype\u0026#34;: \u0026#34;yaml\u0026#34;, \u0026#34;repository\u0026#34;: \u0026#34;keydraconfiguration\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;config/environments.yaml\u0026#34; } } When distributing secrets to a code repo, the config accountusername will be used by default, unless over-ridden within the config section of the distribution spec. For example, this distribution would use the gyrospectre organisation in Github:\ndistribute:-config:repository:my_codescope:repositoryenvs:- devkey:AWS_ACCESS_KEY_IDprovider:githubsource:keyWhereas this spec overrides the default to use the woot org.\ndistribute:- config:repository:my_codescope:repositoryaccount_username:wootenvs:- devkey:AWS_ACCESS_KEY_IDprovider:githubsource:key"},{"id":1,"href":"/keydra/examples/","title":"Examples","parent":"Keydra - Secrets Management for Humans!","content":""},{"id":2,"href":"/keydra/gettingstarted/","title":"Getting Started","parent":"Keydra - Secrets Management for Humans!","content":"So you want to give Keydra a go? Here\u0026rsquo;s how you deploy it to an AWS account with a starter secret under management.\nYou will need       An AWS account. Don\u0026rsquo;t have one? Free tier is fine! Go get a free one at https://aws.amazon.com/free!\n  An Atlassian Bitbucket or a Github account, to host your Keydra configuration. We only support Bitbucket and Github right now, but expect to add other code repository providers in the future.\n  Initial Deployment     Setup a configuration repository       Create a new private repository, clone it locally, and change to the new directory. See the relevant guide for your preferred platform option:\n Github Gitlab Bitbucket    Create a new directory called config, and initialise your environments and secrets files. We\u0026rsquo;ll start with one AWS environment (i.e. account) called main, and one sample secret called sample.\n  mkdir config \u0026amp;\u0026amp; cd config touch environments.yaml secrets.yaml Edit environments.yaml. This file tells Keydra about the AWS account it will deploy to, and which secrets to manage there.  dev:description:Our Development AWS accounttype:awsaccess:devid:\u0026lt;your AWS account ID\u0026gt;secrets:- sample For this example, we\u0026rsquo;ve told Keydra that this account is a dev one, but could also be production or uat. The sample line tells Keydra to manage that secret in this environment, which we\u0026rsquo;ll now define! You can add lots of environments (i.e. AWS accounts) to this file, just follow the same format and append.\n  Edit secrets.yaml. This file tells Keydra about our secrets, just one for the time being - update with your repo organisation or user name, and update the provider key to match your code repo type. Note that the repository name here needs to be all lower case.\n   What is the custodians key all about? This is just a free text value that can be used to indicate which person/team is the \u0026lsquo;owner\u0026rsquo; of this secret. Can be handy in a larger environment where secrets are not managed by one central team.\n sample:key:keydra_managed_sampledescription:A example secret which exists in IAMcustodians:my_teamprovider:IAMrotate:nightlyconfig:groups:- MyDeploymentGrouppolicies:- a/path/PolicyNamedistribute:-config:repository:keydraconfigurationaccount_username:\u0026lt;your repo org or user name\u0026gt;scope:repositoryenvs:- devkey:AWS_ACCESS_KEY_IDprovider:\u0026lt;bitbucket OR github\u0026gt;source:key-config:repository:keydraconfigurationaccount_username:\u0026lt;your repo org or user name\u0026gt;scope:repositoryenvs:- devkey:AWS_SECRET_ACCESS_KEYprovider:\u0026lt;bitbucket OR github\u0026gt;source:secretNow push your config up to the repo.  git add . git commit -m \u0026#34;Initial commit\u0026#34; git push origin main What have we setup? This secret will create/manage an IAM user, which we\u0026rsquo;ll rotate the password every night, and distribute the key and secret as two environment variables in our new code repository. Why would you do this? You could use these credentials in pipelines to deploy code to AWS. Rather than hardcoding these values in your repo, this way Keydra will ensure that they are:\n  using your least privilege deploy IAM group (MyDeploymentGroup, which we\u0026rsquo;ll create soon)\n  are changed (very!) frequently to limit impact if compromised/exposed\n  are not seen by sneaky humans that can put them onto sticky notes or sell on the dark web!\n  Deploy Keydra to AWS      On your local machine, clone the Keydra role and install dependencies. Always best to create/activate a Python virtualenv first, but will leave that up to you.  git clone https://github.com/Athena-Home-Loans/keydra.git cd keydra pip install -r requirements-dev.txt pip install -r src/requirements.txt  Friends don\u0026rsquo;t let friends use admin for everything!! Login to your AWS account console, and create a new IAM user called keydra_deploy, with programmatic access only and a policy like that in docs/KeydraDeploy.json.\n  Create an access key for the keydra_deploy user and stash the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as enviroment variables in your terminal.\n  Now, we\u0026rsquo;re going to use AWS SAM \u0026lt;https://aws.amazon.com/serverless/sam/\u0026gt;_ to deploy two CloudFormation stacks. The first one (keydraExecRole) sets up a least privilege role to run Keydra with. Execute the following on your local machine, changing the region to match your needs.\n   We\u0026rsquo;ve added some additional restrictions to this sample role. This requires all Keydra managed secrets in AWS Secrets Manager to be tagged with \u0026ldquo;managedby: keydra\u0026rdquo;. If this annoys you, delete lines 52-54 to provide Keydra will perms to all secrets.\n sam build -t docs/KeydraExecRole.yaml sam deploy -t docs/KeydraExecRole.yaml --stack-name keydraExecRole --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM --region ap-southeast-2  Assuming the SAM run was successful, you should see an outputs block with an Arn for the new role. Note this down, we\u0026rsquo;ll need this for step 7.\n  Now we\u0026rsquo;ll create the second stack, this one for keydra itself. Copy docs/sample_template.yaml to your main Keydra directory as template.yaml. This is a nice SAM template that will make this easy!\n  cp docs/sample_template.yaml template.yaml  Edit template.yaml. This looks daunting, but you only need to change the 6 values in angle brackets.\n IAM Role Arn - This is the ARN to an AWS IAM role that you\u0026rsquo;ll use to run Keydra, from step 5. repo account name - The code repo account or organisation name from the first section. secrets repo name - The repository name. In this example, this is KeydraConfiguration. path to secrets.yaml - The path to our secrets. For our example, this is src/main/config/secrets.yaml for Bitbucket, or main/config/secrets.yaml for Github. environments repo name - We\u0026rsquo;ll use the same repo, use KeydraConfiguration. path to environments.yaml - The path to our environments definition. For our example, this is src/main/config/environments.yaml for Bitbucket, or main/config/environments.yaml for Github.    Build and deploy with SAM. Make sure Docker is installed/running first!\n  sam build --use-container sam deploy --stack-name keydra --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND --region ap-southeast-2 Test Run     Let\u0026rsquo;s do an adhoc trial run of the lambda!\n  In the AWS Console, navigate to the Lambda service.\n  You should see a keydra function, open it up.\n  Scroll down a little, and select the Test tab. Test with the following event, which tells Keydra to run a Nightly run with debug enabled. Click the Test button to run Keydra.\n  { \u0026#34;trigger\u0026#34;: \u0026#34;nightly\u0026#34;, \u0026#34;debug\u0026#34;: true } With a little luck, you should see something like this!  What just happened? Keydra created an IAM user in AWS, and then stored the IAM username and password in two separate repository variables in your code repository. You can see the results under your repo; browse to Repository settings \u0026gt; Repository variables in Bitbucket, or Settings \u0026gt; Secrets in Github.  You can now use these values to deploy your code to AWS, and Keydra will kindly rotate them automagically every night, without you needing to do a thing!\n"},{"id":3,"href":"/keydra/getting_started/","title":"Getting_started","parent":"Keydra - Secrets Management for Humans!","content":""},{"id":4,"href":"/keydra/examples/githubactionsawsdeployment/","title":"Github Actions AWS Deployment Credentials","parent":"Examples","content":"Example to rotate an AWS IAM user password; then, using an access token from the AWS Secrets Manager secret located at keydra/github, encrypt the IAM user Id/password values and save them to secrets within the my_repo repo of the me Github account.\nsample:key:keydra_managed_sampledescription:A secret which exists in IAMcustodians:my_teamprovider:IAMrotate:nightlydistribute:-config:repository:my_repoaccount_username:mescope:repositoryenvs:- devkey:AWS_ACCESS_KEY_IDprovider:githubsource:key-config:repository:my_repoaccount_username:mescope:repositoryenvs:- devkey:AWS_SECRET_ACCESS_KEYprovider:githubsource:secret"},{"id":5,"href":"/keydra/examples/gitlabawsdeployment/","title":"Gitlab AWS Deployment Credentials","parent":"Examples","content":"Example to rotate an AWS IAM user\u0026rsquo;s AWS_SECRET_ACCESS_KEY; then, using an access token from the AWS Secrets Manager secret located at keydra/gitlab, store the IAM user\u0026rsquo;s AK/SAK values as CI/CD variables within the group/infra/releases repo.\nsample:key:keydra_managed_sampledescription:A secret which exists in IAMcustodians:my_teamprovider:IAMrotate:nightlydistribute:-config:repository:group/infra/releasesscope:repositoryenvs:- \u0026#39;*\u0026#39;key:AWS_ACCESS_KEY_IDprovider:gitlabsource:key-config:repository:group/infra/releasesscope:repositoryenvs:- \u0026#39;*\u0026#39;key:AWS_SECRET_ACCESS_KEYprovider:gitlabsource:secret"},{"id":6,"href":"/keydra/examples/iamsplunk/","title":"IAM User to ingest AWS Logs into Splunk","parent":"Examples","content":"Example to rotate the secrets for an IAM user in AWS daily, creating if the user does not exist. Distribute to the AWS Add On of a Splunk instance, using Splunk credentials from Secrets Manager in keydra/splunk/awssplunk.\naws_splunk_integration:key:keydra_awssplunkdescription:Rotate the AWS Splunk integration account in Splunkcustodians:my_teamprovider:IAMrotate:nightlydistribute:-key:aws_prodprovider:splunkprovider_secret_key:awssplunksource:key_id:keysecret_key:secretconfig:app:Splunk_TA_awsappconfig:category:1output_mode:jsonhost:splunk.mydomain.intpath:splunk_ta_aws_aws_accountenvs:- prod"},{"id":7,"href":"/keydra/getting_started/bitbucket/","title":"Initial Bitbucket Setup","parent":"Getting_started","content":"To use Bitbucket for your config source, read on. If needed, you can create a free account here.\nSetup a configuration repository      Create a new private repository in Bitbucket. Let\u0026rsquo;s call it KeydraConfiguration.   Clone your new repo locally. Click the Clone button at the top right of your new repo\u0026rsquo;s Source page, and paste into your terminal.\nNote: You may need to setup an SSH key for this, see here for help if needed.\n  git clone git@bitbucket.org:\u0026lt;your BB username\u0026gt;/keydraconfiguration.git cd keydraconfiguration Create app credentials      Create App password for your Bitbucket user. Click your user avatar in the bottom left corner, then Personal settings \u0026gt; App passwords. Click the blue Create app password button.  Call the App password keydra, and minimum permissions. Click Create.   You\u0026rsquo;ll be shown a password, which you\u0026rsquo;ll only see once! In another tab, login to the AWS Console and navigate to the Secrets Manager service.\n  Click the orange Store a new secret button.\n  Choose a secret type of Other type of secrets, and add a plaintext secret as follows (substituting your details).  { \u0026#34;password\u0026#34;: \u0026#34;\u0026lt;the password from step 3\u0026gt;\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;\u0026lt;your bb username\u0026gt;\u0026#34; }  You can leave encryption settings as default, or update to your needs. Click Next.\n  Call your secret keydra/bitbucket.\n  Auto rotation is not required (Keydra will do this), so just click Next on the next screen, then Store on the one after.\n  "},{"id":8,"href":"/keydra/getting_started/github/","title":"Initial Github Setup","parent":"Getting_started","content":"To use Github for your config source, read on.\nSetup a configuration repository       Create a new private repository in Github. Let\u0026rsquo;s call it KeydraConfiguration.\n  Clone your new repo locally. Click the Clone button in your new repo, and paste into your terminal.\n  git clone git@github.com:\u0026lt;your Github org or username\u0026gt;/keydraconfiguration.git cd keydraconfiguration Create a Personal Access Token       From your repository in your browser, click Settings from your profile avatar in the top right corner.\n  Choose Developer settings \u0026gt; Personal access tokens \u0026gt; Generate new token.\n  Give the token a name, all repo permissions, then click Generate token.\n   You\u0026rsquo;ll be shown a password, which you\u0026rsquo;ll only see once! In another tab, login to the AWS Console and navigate to the Secrets Manager service.\n  Click the orange Store a new secret button.\n  Choose a secret type of Other type of secrets, and add a plaintext secret as follows (substituting your details).  { \u0026#34;password\u0026#34;: \u0026#34;\u0026lt;the token from step 4\u0026gt;\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;\u0026lt;your github username\u0026gt;\u0026#34; }  You can leave encryption settings as default, or update to your needs. Click Next.\n  Call your secret keydra/github.\n  Auto rotation is not required (Keydra will do this), so just click Next on the next screen, then Store on the one after.\n  "},{"id":9,"href":"/keydra/getting_started/gitlab/","title":"Initial Gitlab Setup","parent":"Getting_started","content":"To use Gitlab as your config source, read on.\nSetup a configuration repository       Create a new repository in Gitlab. Let\u0026rsquo;s call it KeydraConfiguration.\n  Clone your new repo locally.\n  Create a Personal Access Token       Follow the instructions to create a personal access token. https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\n  Log into to the AWS Console and navigate to the Secrets Manager service.\n  Click the orange Store a new secret button.\n  Choose a secret type of Other type of secrets, and add a plaintext secret as follows (substituting your details).  { \u0026#34;access_token\u0026#34;: \u0026#34;\u0026lt;your gitlab personal access token\u0026gt;\u0026#34; }  You can leave encryption settings as default, or update to your needs. Click Next.\n  Call your secret keydra/gitlab.\n  Auto rotation is not required (Keydra will do this), so just click Next on the next screen, then Store on the one after.\n  "},{"id":10,"href":"/keydra/providers/","title":"Providers","parent":"Keydra - Secrets Management for Humans!","content":"AWS AppSync     AWS Appsync (declared as appsync): currently can only rotate secrets. Returns rotated keys in the format:\n{ \u0026#34;provider\u0026#34;: \u0026#34;aws_appsync\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;key\u0026#34;, \u0026#34;secret\u0026#34;: \u0026#34;secret\u0026#34; } Uses client AWS AppSync.\nAWS IAM     AWS IAM (declared as iam): can only rotate secrets (as it doesn\u0026rsquo;t really make sense for it to receive (via distribution) any secrets). Returns rotated keys in the format:\n{ \u0026#34;provider\u0026#34;: \u0026#34;iam\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;\u0026lt;AWS ACCESS KEY ID\u0026gt;\u0026#34;, \u0026#34;secret\u0026#34;: \u0026#34;\u0026lt;AWS ACCESS SECRET KEY\u0026gt;\u0026#34; } Uses client AWS IAM.\nAWS Kinesis Firehose     AWS Kinesis Firehose (declared as firehose): can only distribute secrets to Firehose destinations. It doesn\u0026rsquo;t make sense for it to rotate! The distribute spec looks like this:\ndistribute:-key:streamnameprovider:firehosesource:secret_keyconfig:dest_type:splunk | httpregion:AWS Regionenvs:- devThis will distribute a secret to a Firehose delivery stream destination of type dest_type, for a stream name of key.\nValid values for dest_type are \u0026lsquo;splunk\u0026rsquo; or \u0026lsquo;http\u0026rsquo;, corresponding to those options supported by AWS (https://docs.aws.amazon.com/firehose/latest/dev/create-destination.html). The provider will take the key from the secret specified by source, and save it to the token or password of the Firehose destination.\nRegion is an optional value and can be used to specify which AWS region the stream lives in - if omitted Keydra will just use the region it is running in.\nAs an example, the Firehose Splunk destination sends events to a Splunk HTTP Event Collector (HEC), so the following would rotate a HEC token nightly, and save the value to a Firehose stream located in region us-east-1:\nsample:key:keydra_managed_sampledescription:Examplecustodians:my_teamprovider:splunk_hecrotate:nightlyconfig:host:my.splunkhostrotatewith:key:keydra/splunk/adminprovider:secretsmanagerdistribute:-key:streamnameprovider:firehosesource:hecTokenconfig:dest_type:splunkregion:us-east-1envs:- devUses client AWS Kinesis Firehose.\nAWS Secrets Manager     AWS SecretsManager (declared as secretsmanager): currently can only distribute secrets. rotate is only supported in conjunction with bypass: true for retrieval of existing secrets for the purposes of distribution to respective destinations.\nsecretsmanager is greedy in other words, it will take all that is provided by the secret and stick it into AWS SecretsManager. So no 1-1 mapping or cherry picking fragments.\nUses client AWS Secrets Manager.\nBitbucket     Bitbucket (declared as bitbucket): can distribute secrets to the following scopes:\n account (account-level env variables) repository (build-level or development-level env variables) deployment (deployment environment env variable)  In the future will also support rotate keys as its own secrets should be rotated by Keydra.\nIt is also a config provider. See About Config Providers.\nbitbucket requires 1:1 mapping of the secret, this is done via source.\nUses client Bitbucket.\nCloudflare     Cloudflare (declared as cloudflare): can rotate secrets. Requires a token with the Can create tokens permission in Cloudflare, registered under manage_tokens.secret in SecretsManager. When invoked rotates all of the tokens pertaining to that account and make their ID and SECRET available, as per \u0026lt;token_name\u0026gt;.key and \u0026lt;token_name\u0026gt;.secret.\nUses client Cloudflare.\nContentful     Uses client Contentful.\nGithub     Github can distribute secrets to the repository scope only. It is also a config provider. See About Config Providers), and can be used as a source for your secret and environment specs. In your SAM template, use KEYDRA_CFG_PROVIDER=github to tell Keydra to look in Github for secrets to manage.\nThis provider is really just an MVP to kickstart Github support, so other secret scopes have not yet been implemented.\nFor a given secret specification, the distribute function will add an encrypted secret to the specified repository. See https://docs.github.com/en/actions/reference/encrypted-secrets.\nFor example, for a secret spec of:\nsample:key:keydra_managed_sampledescription:A example secret which exists in IAMcustodians:my_teamprovider:IAMrotate:nightlydistribute:- config:repository:keydraconfigurationaccount_username:mescope:repositoryenvs:- devkey:AWS_ACCESS_KEY_IDprovider:githubsource:key- config:repository:keydraconfigurationaccount_username:mescope:repositoryenvs:- devkey:AWS_SECRET_ACCESS_KEYprovider:githubsource:secretThe provider will take the AWS IAM user credentials and, using an access token from the AWS Secrets Manager secret located at keydra/github, encrypt the IAM user Id/password values and save them to secrets within the keydraconfiguration repo of the me organisation or Github account.\nTo use Github as your main Keydra source provider, set the relevant environment variables that your Lambda runs as. As in, set the following in your SAM template.yaml:\nVariables:KEYDRA_CFG_PROVIDER:githubKEYDRA_CFG_CONFIG_ACCOUNTUSERNAME:myAccountNameKEYDRA_CFG_CONFIG_SECRETS_REPOSITORY:keydraconfigurationKEYDRA_CFG_CONFIG_SECRETS_PATH:main/config/secrets.yamlKEYDRA_CFG_CONFIG_SECRETS_FILETYPE:yamlKEYDRA_CFG_CONFIG_ENVIRONMENTS_REPOSITORY:keydraconfigurationKEYDRA_CFG_CONFIG_ENVIRONMENTS_PATH:main/config/environments.yamlKEYDRA_CFG_CONFIG_ENVIRONMENTS_FILETYPE:yamlUses client Github.\nGitlab     Gitlab can distribute secrets to the repository scope only. It is also a config provider (see About Config Providers), and can be used as a source for your secret and environment specs. In your SAM template, use KEYDRA_CFG_PROVIDER=gitlab to tell Keydra to look in Gitlab for secrets to manage.\nThis provider has functionality similar to the Github provider (see above).\nFor a given secret specification, the distribute function will add a repository (CI/CD) variable to the specified repository. See https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-project.\nFor example, for a secret spec of:\nsample:key:keydra_managed_sampledescription:A example secret which exists in IAMcustodians:my_teamprovider:IAMrotate:nightlydistribute:- config:repository:keydraconfigurationscope:repositoryenvs:- devkey:AWS_ACCESS_KEY_IDprovider:gitlabsource:key- config:repository:keydraconfigurationscope:repositoryenvs:- devkey:AWS_SECRET_ACCESS_KEYprovider:gitlabsource:secretThe provider will take the AWS IAM user credentials and, using an access token from the AWS Secrets Manager secret located at keydra/gitlab, encrypt the IAM user Id/password values and save them to secrets within the keydraconfiguration repo.\nTo use Gitlab as your main Keydra source provider, set the relevant environment variables that your Lambda runs as. As in, set the following in your SAM template.yaml:\nVariables:KEYDRA_CFG_PROVIDER:gitlabKEYDRA_CFG_CONFIG_SECRETS_REPOSITORY:keydraconfigurationKEYDRA_CFG_CONFIG_SECRETS_REPOSITORYBRANCH:mainKEYDRA_CFG_CONFIG_SECRETS_PATH:config/secrets.yamlKEYDRA_CFG_CONFIG_SECRETS_FILETYPE:yamlKEYDRA_CFG_CONFIG_ENVIRONMENTS_REPOSITORY:keydraconfigurationKEYDRA_CFG_CONFIG_ENVIRONMENTS_REPOSITORYBRANCH:mainKEYDRA_CFG_CONFIG_ENVIRONMENTS_PATH:config/environments.yamlKEYDRA_CFG_CONFIG_ENVIRONMENTS_FILETYPE:yamlKEYDRA_CFG_CONFIG_ACCOUNTUSERNAME:notRequiredUses client Gitlab.\nQualys     Provides password rotation support for Qualys accounts. Only rotate has been implemented, distribution is not (yet?) supported.\nFor a given secret specification, the rotate function fetches the contents of a AWS Secrets Manager secret located at keydra/qualys/\u0026lt;key\u0026gt; (using the key from the spec), and changes the password of the user specified on the Qualys platform. As Qualys does not permit a user to change their own password via API, the secret spec needs to specify a second account to be used to make the change.\nFor example, for a secret spec of:\nsample:description:API Userkey:apiprovider:qualysrotate:nightlyconfig:rotatewith:key:keydra/qualys/backupprovider:secretsmanagerdistribute:-key:keydra/qualys/apiprovider:secretsmanagersource:secretenvs:- prodThe provider will take an AWS Secrets Manager secret, located at keydra/qualys/api:\n{ \u0026#34;platform\u0026#34;: \u0026#34;US3\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;apiuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;Ssh.Secret!\u0026#34;, } Then use the creds of the secret at keydra/qualys/backup (in Secrets Manager, as configured in the spec) to connect to the Qualys API and change the password of the apiuser account. With the distribution setup in the example, the new password will then be placed into Secrets Manager, replacing the password with the new one.\nSee https://www.qualys.com/platform-identification/ to identify which platform your instance is on.\nUses client Qualys.\nSalesforce     Salesforce (declared as salesforce): currently can only rotate secrets. Please note that users need to be manually created in salesforce before added here.\nSample secret spec:\nkey:salesforce_sampledescription:Salesforce Examplecustodians:your_teamprovider:salesforcerotate:nightlydistribute:-key:keydra/salesforce/salesforce_sampleprovider:secretsmanagersource:secretenvs:- prodThe Secrets Manager entry format is as follows:\n{\u0026#34;provider\u0026#34;: \u0026#34;salesforce\u0026#34;,\u0026#34;key\u0026#34;: \u0026#34;my_sf_user\u0026#34;,\u0026#34;secret\u0026#34;: \u0026#34;my_sf_password\u0026#34;,\u0026#34;token\u0026#34;: \u0026#34;sf_token\u0026#34;,\u0026#34;domain\u0026#34;: \u0026#34;sf_domain\u0026#34;}The field names can be customised via a config section in the spec, e.g.:\nkey:salesforce_sampledescription:Salesforce Exampleprovider:salesforceconfig:user_field:SF_USERNAMEpassword_field:SF_PASSWORDtoken_field:SF_TOKENdomain_field:SF_DOMAIN# ...Uses client Salesforce.\nSplunk     Provides password (and token!) rotation and distribution support for Splunk. Rotation allows for Splunk account passwords/tokens to be rotated, while Distribute allows you to save passwords from other providers in Splunk apps, like Qualys or AWS.\nRotation can be done on only one Splunk instance at a time.\nWhen rotating passwords, a new 32 character password is generated (using AWS Secrets Manager) and the provider changes the Splunk password for the account corresponding to the \u0026ldquo;key\u0026rdquo; value in the secret. This change is made on the Splunk host defined within the \u0026ldquo;config\u0026rdquo; section of the secret.\nFor Splunk Tokens, the current token for that user is used to create a new token, and delete the old. No additional configuration is required - the provider auto detects the type of \u0026ldquo;password\u0026rdquo; being rotated, and acts accordingly.\nAn example secret spec to rotate a Splunk user password and store in AWS Secrets Manager:\nkey:splunkuserdescription:Splunk Rotation Examplecustodians:your_teamprovider:splunkrotate:nightlyconfig:host:your.splunkhostname.comdistribute:-key:keydra/splunk/splunkuserprovider:secretsmanagersource:secretenvs:- prodThe Secrets Manager entry format is as follows:\n{ \u0026#34;username\u0026#34;: \u0026#34;splunkuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;abcdefghijklmnopqrstuvwxyz1234567890\u0026#34; } Distribution is a little more complex; configuring a Splunk App or Add-On with a service account to be used by that app to connect to various data sources. Only one destination host can be specified; if you need to send to more Splunk hosts you will need another distribution entry. The provider supports either Splunk storage passwords or a more custom method of actually storing the password on Splunk - which one to use depends on the destination Splunk TA/app. For example, the AWS app for Splunk uses the custom method, while the Qualys app uses storage passwords.\nThe destination app must already be installed on the Splunk instance, though the config entry / storage password will be created if it doesn’t already exist.\n   Key Type Value     key String The object to distribute to. Ignored/optional if we\u0026rsquo;re saving to a Splunk storage password.   provider String Always “splunk” for this provider.   provider_secret_key String The credentials that should be used to authenticate to the Splunk API. In the code, this value will be prepended with keydra/splunk/ to form the secret name in AWS Secrets Manager where the creds are stored.   source Dict Used to pass through values from the secret being distributed - format is splunk field: secret key. In the example below, a field of \u0026ldquo;secret_key\u0026rdquo; will be used in the Splunk post, containing the value of the \u0026ldquo;secret\u0026rdquo; key.   config Dict See below for details.   env List Which environments to run Keydra from. Should match the environment where the secret is held in Secrets Manager.    In the config section:\n   Key Type Value     host String The Splunk host to configure. Only one destination host can be specified, if you need to distribute to more Splunk hosts you will need another distribution entry.   app String Splunk App context to deploy to.   appconfig Dict Used to add any values needed by this Add-On. All appconfig KV pairs will be passed to the Splunk call as is.   path String Optional. Specifies the (case sensitive!) URL path to the configuration section to update. Omit this key to save to a splunk storage password instead.   realm String Optional. If storage passwords are being used, the realm to use in the password. Defaults to blank.    An example, to rotate an IAM user and distribute it into the AWS app/TA of a Splunk instance:\nkey:km_managed_splunkdescription:Rotate an AWS Splunk integration accountcustodians:your_teamprovider:IAMrotate:nightlydistribute:-key:aws_securityprovider:splunkprovider_secret_key:provisioning_usersource:key_id:keysecret_key:secretconfig:app:Splunk_TA_awsappconfig:category:1output_mode:jsonhost:your.splunkhostname.compath:splunk_ta_aws_aws_accountenvs:- prodWhat does this do? Keydra will rotate these IAM credentials, then use the Splunk credentials stored in an AWS Secrets Manager secret, located at \u0026lsquo;keydra/splunk/provisioning_user\u0026rsquo; to connect to Splunk. It will then post the key value pairs in the config/appconfig section to the app specified (Splunk_TA_aws), mixing in the keys in the source section after mapping them from the secret. As in, the key value from the IAM secret will be posted as key_id.\n Note: The category 1 reference? This is the category of the account. \u0026lsquo;1\u0026rsquo; is AWS Global (not GovCloud).\n If your app uses storage passwords (like the Qualys app), the distribution stanza would look more like:\n-provider:splunkprovider_secret_key:provisioning_usersource:name:usernamepassword:passwordconfig:app:TA-QualysCloudPlatformappconfig:output_mode:jsonhost:your.splunkhostname.comenvs:- prodUses client Splunk.\nSplunk HEC     Provides rotation support for Splunk Http Event Collector (HEC) tokens. Distribution is not supported by this provider.\nLike the Qualys provider, the spec requires you to specify a rotatewith value, which is where Keydra can find creds with which to access Splunk and make the change.\nBoth Splunk Enterprise and Splunk Cloud are supported, but only the \u0026lsquo;Classic\u0026rsquo; experience for the latter. If using with Splunk Cloud, make sure the Splunk user you are rotating with has a role with the dmc_deploy_token_http and list_token_http capabilities.\nAn additional note on Splunk Cloud, which uses a DMC to distribute content to the indexes; rotating HEC tokens can take up to 5 minutes due to the cluster synchoronisation requirements.\nkey:hec1description:Splunk HEC Rotation Examplecustodians:your_teamprovider:splunk_hecrotate:nightlyconfig:host:your.splunkhostname.comrotatewith:key:keydra/splunk/adminprovider:secretsmanagerdistribute:-key:keydra/splunk/hec1provider:secretsmanagersource:secretenvs:- prodThe Secrets Manager entry format is as follows:\n{ \u0026#34;hecInputName\u0026#34;: \u0026#34;HEC Input Name\u0026#34;, \u0026#34;hecToken\u0026#34;: \u0026#34;13e58a8a-ab69-4c89-8941-51b26d797e5a\u0026#34; } Uses client Splunk.\n"},{"id":11,"href":"/keydra/examples/salesforce/","title":"Salesforce Service Account","parent":"Examples","content":"Example to rotate the secrets for a Salesforce user daily, distributing the new password to Secrets Manager.\nsalesforce_user:key:sfuser-devdescription:Secret for break glass access to Salesforce Prodcustodians:sf_teamprovider:salesforcerotate:nightlydistribute:-key:keydra/salesforce/sf-userprovider:secretsmanagersource:secretenvs:- dev"},{"id":12,"href":"/keydra/developing/clients/","title":"Clients","parent":"Developing","content":"Clients commonly live in keydra.clients, but you may be sourcing it directly from somewhere else, or have other aspirations\u0026hellip; no judgement here.\nAnyway\u0026hellip; Clients are nothing but SDKs to facilitate (keep the code clean, really) the development of Providers.\nSee the client documentation for more details on what\u0026rsquo;s supported.\n"},{"id":13,"href":"/keydra/developing/contrib/","title":"Contribution Guidelines","parent":"Developing","content":"Plain and simple\u0026hellip; just cut a PR!\nBut not so fast!\n Work on a feature branch Make sure you have tests Did you drop coverage, be ready to discuss why Create a Pull Request.  Please ensure tests are passing before creating a PR. We also ask you to be PEP8 compliant.\nnosetests flake8 "},{"id":14,"href":"/keydra/developing/","title":"Developing","parent":"Keydra - Secrets Management for Humans!","content":""},{"id":15,"href":"/keydra/develop/","title":"Developing Keydra","parent":"Keydra - Secrets Management for Humans!","content":"If you are coding something new, chances are you are adding or updating a client, a provider or both!\n"},{"id":16,"href":"/keydra/developing/providers/","title":"Providers","parent":"Developing","content":"Providers make the magic happen. As of today they have 2 responsibilities:\n  rotation (which depending on the provider, can also be used to provision secrets)\n  distribution\n  \u0026hellip; and implement the methods described in keydra.providers.base. See the provider documentation for more details on what\u0026rsquo;s supported out of the box.\n\nRotation     During the rotate phase, the provider will be invoked with a description (dict) of a secret.\nSo in the example below where secrets.yaml has:\nsecret_identifier:description:Some description for the secretkey:key_identifierprovider:provider_typerotate:nightlydistribute:- ...The rotate method will receive:\n{ \u0026#34;description\u0026#34;: \u0026#34;Some description for the secret\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;key_identifier\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;provider_type\u0026#34;, \u0026#34;rotate\u0026#34;: \u0026#34;nightly\u0026#34; } Note that the provider attribute is what brought the config into your provider to begin with.\nFrom that moment on it is your responsibility to rotate (whatever it means to your provider) the secret described as key_identifier.\nSomething goes wrong, simply raise keydra.exceptions.RotationException.\nAll going well, return a dict containing the attributes of your secret (including the secret bits, like password\u0026hellip; don\u0026rsquo;t worry it is safe and never logged\u0026hellip; unless you mess up).\n\nDistribution     During the distribute phase, the provider will be invoked with 2 descriptions (dict, dict):\n the secret (recently rotated, containing the secret bits) A description of a distribution point.  From that moment on it is your responsibility to distribute (whatever it means to your provider) the secrets.\nRemember that the secret will come decorated with provider, so if you need to be specific about how to consume from certain providers you can. BUT\u0026hellip; if that is happening you probably missed something as the description of a distribution point should be self-explanatory and self-contained.\n"},{"id":17,"href":"/keydra/","title":"Keydra - Secrets Management for Humans!","parent":"","content":"Next level Secrets Management, without the price tag!\nKeydra allows you to automatically rotate your secrets on a schedule you define. Since it\u0026rsquo;s all automated, it\u0026rsquo;s easy to rotate your service account and API keys much more frequently than you do today. Like, everyday!\nThis significanty decreases the period of time an attacker has to use compromised credentials, and lowers the risk for your organisation.\nIt runs as a Lambda function in AWS, and has two main functions.\n  Rotate: Change a secret\n  Distribute: Store a secret\n  These functions are called against providers, which are modular integrations with technology platforms. For each defined secret, you rotate on a single provider, but distribute to multiple providers.\nUse case examples;\n  Once a day, rotate/change an AWS IAM user password, and store in a BitBucket repository as a deployment variable to use in pipelines. (rotate: AWS IAM, distribute: BitBucket)\n  Once a week, rotate/change a Salesforce user password, taking the current secret from AWS Secrets Manager and replacing with the new password once done. (rotate: AWS SecretsManager, distribute: Salesforce, AWS SecretsManager)\n  Check out the supported providers, the list is growing all the time!\n"},{"id":18,"href":"/keydra/tags/","title":"Tags","parent":"Keydra - Secrets Management for Humans!","content":""}]