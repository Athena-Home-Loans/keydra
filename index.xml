<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Keydra - Secrets Management for Humans! on Keydra Documentation</title><link>https://athena-home-loans.github.io/keydra/</link><description>Recent content in Keydra - Secrets Management for Humans! on Keydra Documentation</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://athena-home-loans.github.io/keydra/index.xml" rel="self" type="application/rss+xml"/><item><title>Salesforce Marketing Cloud Service Account</title><link>https://athena-home-loans.github.io/keydra/examples/salesforcemarketingcloud/</link><pubDate>Tue, 20 Sep 2022 19:00:00 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/examples/salesforcemarketingcloud/</guid><description>Example to rotate the secrets for a Salesforce Marketing Cloud user daily, distributing the new password to Secrets Manager.
salesforce_marketing_cloud_user: key: sfuser-dev description: Secret for break glass access to Salesforce Prod custodians: sf_team provider: salesforce_marketing_cloud rotate: nightly distribute: - key: keydra/salesforce/sfmc-user provider: secretsmanager source: secret envs: - dev</description></item><item><title>About Config Providers</title><link>https://athena-home-loans.github.io/keydra/config_providers/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/config_providers/</guid><description>Config providers are a special type of Keydra provider, that can be the source of secrets and environments for Keydra to manage.
They must have an accountusername attribute, and a load_config method, which they use to bootstrap Keydra.
This special method is passed initial config values, which are built by Keydra from environment variables as can be seen in docs/sample_template.yaml.
{ &amp;#34;accountusername&amp;#34;: &amp;#34;an_account&amp;#34;, &amp;#34;secrets&amp;#34;: { &amp;#34;repository&amp;#34;: &amp;#34;keydraconfiguration&amp;#34;, &amp;#34;filetype&amp;#34;: &amp;#34;yaml&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;config/secrets.</description></item><item><title>Getting Started</title><link>https://athena-home-loans.github.io/keydra/gettingstarted/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/gettingstarted/</guid><description>So you want to give Keydra a go? Here&amp;rsquo;s how you deploy it to an AWS account with a starter secret under management.
You will need An AWS account. Don&amp;rsquo;t have one? Free tier is fine! Go get a free one at https://aws.amazon.com/free!
An Atlassian Bitbucket or a Github account, to host your Keydra configuration. We only support Bitbucket and Github right now, but expect to add other code repository providers in the future.</description></item><item><title>Github Actions AWS Deployment Credentials</title><link>https://athena-home-loans.github.io/keydra/examples/githubactionsawsdeployment/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/examples/githubactionsawsdeployment/</guid><description>Example to rotate an AWS IAM user password; then, using an access token from the AWS Secrets Manager secret located at keydra/github, encrypt the IAM user Id/password values and save them to secrets within the my_repo repo of the me Github account.
sample: key: keydra_managed_sample description: A secret which exists in IAM custodians: my_team provider: IAM rotate: nightly distribute: - config: repository: my_repo account_username: me scope: repository envs: - dev key: AWS_ACCESS_KEY_ID provider: github source: key - config: repository: my_repo account_username: me scope: repository envs: - dev key: AWS_SECRET_ACCESS_KEY provider: github source: secret</description></item><item><title>Gitlab AWS Deployment Credentials</title><link>https://athena-home-loans.github.io/keydra/examples/gitlabawsdeployment/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/examples/gitlabawsdeployment/</guid><description>Example to rotate an AWS IAM user&amp;rsquo;s AWS_SECRET_ACCESS_KEY; then, using an access token from the AWS Secrets Manager secret located at keydra/gitlab, store the IAM user&amp;rsquo;s AK/SAK values as CI/CD variables within the group/infra/releases repo.
sample: key: keydra_managed_sample description: A secret which exists in IAM custodians: my_team provider: IAM rotate: nightly distribute: - config: repository: group/infra/releases scope: repository envs: - &amp;#39;*&amp;#39; key: AWS_ACCESS_KEY_ID provider: gitlab source: key - config: repository: group/infra/releases scope: repository envs: - &amp;#39;*&amp;#39; key: AWS_SECRET_ACCESS_KEY provider: gitlab source: secret</description></item><item><title>IAM User to ingest AWS Logs into Splunk</title><link>https://athena-home-loans.github.io/keydra/examples/iamsplunk/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/examples/iamsplunk/</guid><description>Example to rotate the secrets for an IAM user in AWS daily, creating if the user does not exist. Distribute to the AWS Add On of a Splunk instance, using Splunk credentials from Secrets Manager in keydra/splunk/awssplunk.
aws_splunk_integration: key: keydra_awssplunk description: Rotate the AWS Splunk integration account in Splunk custodians: my_team provider: IAM rotate: nightly distribute: - key: aws_prod provider: splunk provider_secret_key: awssplunk source: key_id: key secret_key: secret config: app: Splunk_TA_aws appconfig: category: 1 output_mode: json host: splunk.</description></item><item><title>Initial Bitbucket Setup</title><link>https://athena-home-loans.github.io/keydra/getting_started/bitbucket/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/getting_started/bitbucket/</guid><description>To use Bitbucket for your config source, read on. If needed, you can create a free account here.
Setup a configuration repository Create a new private repository in Bitbucket. Let&amp;rsquo;s call it KeydraConfiguration. Clone your new repo locally. Click the Clone button at the top right of your new repo&amp;rsquo;s Source page, and paste into your terminal.
Note: You may need to setup an SSH key for this, see here for help if needed.</description></item><item><title>Initial Github Setup</title><link>https://athena-home-loans.github.io/keydra/getting_started/github/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/getting_started/github/</guid><description>To use Github for your config source, read on.
Setup a configuration repository Create a new private repository in Github. Let&amp;rsquo;s call it KeydraConfiguration.
Clone your new repo locally. Click the Clone button in your new repo, and paste into your terminal.
git clone git@github.com:&amp;lt;your Github org or username&amp;gt;/keydraconfiguration.git cd keydraconfiguration Create a Personal Access Token From your repository in your browser, click Settings from your profile avatar in the top right corner.</description></item><item><title>Initial Gitlab Setup</title><link>https://athena-home-loans.github.io/keydra/getting_started/gitlab/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/getting_started/gitlab/</guid><description>To use Gitlab as your config source, read on.
Setup a configuration repository Create a new repository in Gitlab. Let&amp;rsquo;s call it KeydraConfiguration.
Clone your new repo locally.
Create a Personal Access Token Follow the instructions to create a personal access token. https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html
Log into to the AWS Console and navigate to the Secrets Manager service.
Click the orange Store a new secret button.
Choose a secret type of Other type of secrets, and add a plaintext secret as follows (substituting your details).</description></item><item><title>Providers</title><link>https://athena-home-loans.github.io/keydra/providers/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/providers/</guid><description>AWS AppSync AWS Appsync (declared as appsync): currently can only rotate secrets. Returns rotated keys in the format:
{ &amp;#34;provider&amp;#34;: &amp;#34;aws_appsync&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;key&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;secret&amp;#34; } Uses client AWS AppSync.
AWS IAM AWS IAM (declared as iam): can only rotate secrets (as it doesn&amp;rsquo;t really make sense for it to receive (via distribution) any secrets). Returns rotated keys in the format:
{ &amp;#34;provider&amp;#34;: &amp;#34;iam&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;&amp;lt;AWS ACCESS KEY ID&amp;gt;&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;&amp;lt;AWS ACCESS SECRET KEY&amp;gt;&amp;#34; } Uses client AWS IAM.</description></item><item><title>Salesforce Service Account</title><link>https://athena-home-loans.github.io/keydra/examples/salesforce/</link><pubDate>Sat, 14 May 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/examples/salesforce/</guid><description>Example to rotate the secrets for a Salesforce user daily, distributing the new password to Secrets Manager.
salesforce_user: key: sfuser-dev description: Secret for break glass access to Salesforce Prod custodians: sf_team provider: salesforce rotate: nightly distribute: - key: keydra/salesforce/sf-user provider: secretsmanager source: secret envs: - dev</description></item><item><title>Clients</title><link>https://athena-home-loans.github.io/keydra/developing/clients/</link><pubDate>Sat, 05 Feb 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/developing/clients/</guid><description>Clients commonly live in keydra.clients, but you may be sourcing it directly from somewhere else, or have other aspirations&amp;hellip; no judgement here.
Anyway&amp;hellip; Clients are nothing but SDKs to facilitate (keep the code clean, really) the development of Providers.
See the provider documentation for more details on what&amp;rsquo;s supported.</description></item><item><title>Contribution Guidelines</title><link>https://athena-home-loans.github.io/keydra/developing/contrib/</link><pubDate>Sat, 05 Feb 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/developing/contrib/</guid><description>Plain and simple&amp;hellip; just cut a PR!
But not so fast!
Work on a feature branch Make sure you have tests Did you drop coverage, be ready to discuss why Create a Pull Request. Please ensure tests are passing before creating a PR. We also ask you to be PEP8 compliant.
nosetests flake8</description></item><item><title>Developing Keydra</title><link>https://athena-home-loans.github.io/keydra/develop/</link><pubDate>Sat, 05 Feb 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/develop/</guid><description>If you are coding something new, chances are you are adding or updating a client, a provider or both!</description></item><item><title>Providers</title><link>https://athena-home-loans.github.io/keydra/developing/providers/</link><pubDate>Sat, 05 Feb 2022 14:03:08 +1100</pubDate><guid>https://athena-home-loans.github.io/keydra/developing/providers/</guid><description>Providers make the magic happen. As of today they have 2 responsibilities:
rotation (which depending on the provider, can also be used to provision secrets)
distribution
&amp;hellip; and implement the methods described in keydra.providers.base. See the provider documentation for more details on what&amp;rsquo;s supported out of the box.
Rotation During the rotate phase, the provider will be invoked with a description (dict) of a secret.
So in the example below where secrets.</description></item></channel></rss>